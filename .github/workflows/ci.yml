name: CI

on:
  pull_request:
  push:
    branches:
      - main

env:
  DATABASE_URL: "postgres://postgres:postgres@localhost/crdb-test"

jobs:
  just-test:
    strategy:
      matrix:
        hardcoded:
          - false
        test:
          - { name: Build, command: build --no-dev-deps }
          - { name: Clippy, command: clippy --no-dev-deps, extra: -- -D warnings }
          - { name: Test, command: nextest run }
        rust:
          - { name: Nightly }
          - { name: Stable, sigil: '+stable', toolchain: 'stable' }
          - { name: MSRV, sigil: '+1.75.0', toolchain: '1.75.0' }
        include:
          - hardcoded: true
            name: Just Test
            command: just test
    name: ${{ matrix.hardcoded && matrix.name || format('{0} All Features ({1})', matrix.test.name, matrix.rust.name) }}
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Install cargo dependencies
      - uses: taiki-e/install-action@278aeeb6e331c1bd610bffe45862e09452854b1a
        with:
          tool: just, cargo-nextest, cargo-hack, sqlx-cli, wasm-bindgen-cli

      # Setup sccache, that'll share build artifacts with all the target directories
      - uses: mozilla-actions/sccache-action@9e326ebed976843c9932b3aa0e021c6f50310eb4
      - run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      # Setup chromedriver for client-js tests
      - uses: nanasess/setup-chromedriver@42cc2998329f041de87dc3cfa33a930eacd57eaa
      - run: sudo Xvfb -ac :0 -screen 0 1280x1024x24 > /dev/null 2>&1 &

      # Setup postgresql for server tests
      - uses: ikalnytskyi/action-setup-postgres@10ab8a56cc77b4823c2bfa57b1d4dd5605ef0481
        with:
          username: postgres
          password: postgres
          database: crdb-test
      - run: sqlx migrate run --source crdb-postgres/migrations

      # Prepare rustup
      - run: ${{ matrix.rust.toolchain && format('rustup toolchain install {0}', matrix.rust.toolchain) }}
      - run: ${{ matrix.rust.toolchain && format('rustup component add clippy --toolchain {0}', matrix.rust.toolchain) }}

      # Run the tests
      - run: ${{ matrix.hardcoded && matrix.command || format('cargo {0} hack {1} --workspace --feature-powerset {2}', matrix.rust.sigil, matrix.test.command, matrix.test.extra) }}

  just-clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@278aeeb6e331c1bd610bffe45862e09452854b1a
        with:
          tool: just
      - run: just clippy

  just-udeps:
    name: Udeps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@278aeeb6e331c1bd610bffe45862e09452854b1a
        with:
          tool: just, cargo-hack, cargo-udeps
      - run: just udeps-full

  just-doc:
    name: Doc
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@278aeeb6e331c1bd610bffe45862e09452854b1a
        with:
          tool: just
      - run: just doc

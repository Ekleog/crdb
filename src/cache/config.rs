use super::ObjectCache;
use crate::{
    crdb_internal::DbOpError,
    db_trait::{Db, DynNewEvent, DynNewObject, DynNewRecreation},
    CanDoCallbacks,
};
use std::future::Future;

pub trait CacheConfig {
    /// Auto-generated by `crdb::db!`.
    ///
    /// Calls `cache`'s `create` method with the proper type and the fields from `o`.
    fn create(
        cache: &mut ObjectCache,
        o: DynNewObject,
    ) -> impl Send + Future<Output = anyhow::Result<bool>>;

    /// Auto-generated by `crdb::db!`.
    ///
    /// Calls `cache`'s `submit` method with the proper type and the fields from `o`.
    fn submit(
        cache: &mut ObjectCache,
        e: DynNewEvent,
    ) -> impl Send + Future<Output = anyhow::Result<bool>>;

    /// Auto-generated by `crdb::db!`.
    ///
    /// Calls `cache`'s `recreate` method with the proper type and the fields from `s`.
    fn recreate(
        cache: &mut ObjectCache,
        s: DynNewRecreation,
    ) -> impl Send + Future<Output = anyhow::Result<()>>;

    /// Auto-generated by `crdb::db!`.
    ///
    /// Calls `cache`'s `create` method with the proper type and the fields from `o`.
    fn create_in_db<D: Db, C: CanDoCallbacks>(
        db: &D,
        o: DynNewObject,
        cb: &C,
    ) -> impl Send + Future<Output = Result<(), DbOpError>>;

    /// Auto-generated by `crdb::db!`.
    ///
    /// Calls `cache`'s `submit` method with the proper type and the fields from `o`.
    fn submit_in_db<D: Db, C: CanDoCallbacks>(
        db: &D,
        e: DynNewEvent,
        cb: &C,
    ) -> impl Send + Future<Output = anyhow::Result<()>>;

    /// Auto-generated by `crdb::db!`.
    ///
    /// Calls `cache`'s `recreate` method with the proper type and the fields from `s`.
    fn recreate_in_db<D: Db, C: CanDoCallbacks>(
        db: &D,
        s: DynNewRecreation,
        cb: &C,
    ) -> impl Send + Future<Output = anyhow::Result<()>>;
}

[package]
name = "crdb"
version = "0.1.0"
edition = "2021"
license = "AGPL3"

[package.metadata.docs.rs]
all-features = true

[features]
client = [
    "async-stream",
    "paste",
    "sqlx/sqlite",
    "sqlx/uuid",
    "tokio-tungstenite",
    "tokio-util",
]
server = [
    "axum",
    "crdb-core/server",
    "cron",
    "lockable",
    "rand",
    "sqlx/rust_decimal",
    "sqlx/json",
    "sqlx/postgres",
    "sqlx/uuid",
    "tokio-util",
]
_tests = [ # internal feature, for use by wasm tests in particular and thus all tests from there on
    "arbitrary",
    "arbitrary-json",
    "bolero",
    "console_error_panic_hook",
    "crdb-core/arbitrary",
    "paste",
    "rand",
    "reord/test",
    "tracing-wasm",
]

[package.metadata.cargo-udeps.ignore]
normal = [
    "reord", # TODO(test-low): this should probably actually be used in all the builds
]
development = [
    "reord", # TODO(test-low): this should probably actually be used in all the builds
]

[dependencies]
crdb-core.workspace = true
crdb-helpers.workspace = true
crdb-macros.workspace = true

anyhow.workspace = true
bitflags.workspace = true
chrono.workspace = true
deepsize.workspace = true
educe.workspace = true
futures.workspace = true
reord.workspace = true
serde.workspace = true
serde_json.workspace = true
thiserror.workspace = true
tokio.workspace = true
tracing.workspace = true
ulid.workspace = true
web-time.workspace = true

# Optional dependencies
async-stream = { workspace = true, optional = true }
axum = { workspace = true, optional = true }
cron = { workspace = true, optional = true }
lockable = { workspace = true, optional = true }
paste = { workspace = true, optional = true }
rand = { workspace = true, optional = true }
tokio-util = { workspace = true, optional = true }

# Optional dependencies, for tests
arbitrary = { workspace = true, optional = true }
arbitrary-json = { workspace = true, optional = true } # very small crate, can we actually trust updates?
bolero = { workspace = true, optional = true }
console_error_panic_hook = { workspace = true, optional = true }
tracing-wasm = { workspace = true, optional = true }

# Dependencies specifically for wasm32
[target.'cfg(target_arch = "wasm32")'.dependencies]
crdb-core = { workspace = true, features = ["indexed-db", "web-sys"] }
crdb-helpers = { workspace = true, features = ["js"] }

getrandom = { workspace = true, features = ["js"] } # TODO(api-high): introduce a `js` feature here too and enable conditionally
gloo-net.workspace = true
gloo-timers.workspace = true
indexed-db.workspace = true
js-sys.workspace = true
serde-wasm-bindgen.workspace = true
wasm-bindgen.workspace = true
wasm-bindgen-futures.workspace = true
web-sys.workspace = true

# Dependencies specifically for native
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
crdb-core = { workspace = true, features = ["client-native"] }
sqlx.workspace = true
uuid.workspace = true

# Optional dependencies specifically for native
tokio-tungstenite = { workspace = true, optional = true }

[dev-dependencies]
crdb-test-utils.workspace = true

tempfile.workspace = true
tracing-subscriber.workspace = true
wasm-bindgen-test.workspace = true

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
tokio = { workspace = true, features = ["full"] }
